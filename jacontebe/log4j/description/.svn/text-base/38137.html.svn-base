<!DOCTYPE html>
<html><head>




<meta charset="UTF-8"><title>log4j bug 38137</title></head><body>
	

		<h1><b>Bug 38137</b></h1>
		<h2><b>Bug Description:</b></h2>
<p>	This is a wait-notify deadlock bug caused by improper use of wait() and notify() in a consumer and producer pattern.
The following thread dump shows how the deadlock happens: all threads, including consumer,"Dispatcher-Thread-0", and producers, "Thread-*" are in waiting state:
	<pre>"Thread-3" prio=6 tid=0x000000000d362000 nid=0x25c0 in Object.wait() [0x00000000<br>0e01f000]<br>   java.lang.Thread.State: WAITING (on object monitor)<br>        at java.lang.Object.wait(Native Method)<br>        - waiting on &lt;0x00000007d5e3bf88&gt; (a org.apache.log4j.helpers.BoundedFIFO)<br>        at java.lang.Object.wait(Object.java:503)<br>        at org.apache.log4j.AsyncAppender.append(AsyncAppender.java:104)<br>        - locked &lt;0x00000007d5e3bf88&gt; (a org.apache.log4j.helpers.BoundedFIFO)<br>        at org.apache.log4j.Test38137$AppendThread.run(Test38137.java:62)<br><br>"Thread-1" prio=6 tid=0x000000000d35a800 nid=0x148c in Object.wait() [0x00000000<br>0de1f000]<br>   java.lang.Thread.State: WAITING (on object monitor)<br>        at java.lang.Object.wait(Native Method)<br>        - waiting on &lt;0x00000007d5e3bf88&gt; (a org.apache.log4j.helpers.BoundedFIFO)<br>        at java.lang.Object.wait(Object.java:503)<br>        at org.apache.log4j.AsyncAppender.append(AsyncAppender.java:104)<br>        - locked &lt;0x00000007d5e3bf88&gt; (a org.apache.log4j.helpers.BoundedFIFO)<br>        at org.apache.log4j.Test38137$AppendThread.run(Test38137.java:62)<br><br>"Dispatcher-Thread-0" daemon prio=2 tid=0x000000000d359800 nid=0x1f94 in Object.<br>wait() [0x000000000dd1f000]<br>   java.lang.Thread.State: WAITING (on object monitor)<br>        at java.lang.Object.wait(Native Method)<br>        - waiting on &lt;0x00000007d5e3bf88&gt; (a org.apache.log4j.helpers.BoundedFIFO)<br>        at java.lang.Object.wait(Object.java:503)<br>        at org.apache.log4j.Dispatcher.run(AsyncAppender.java:312)<br>        - locked &lt;0x00000007d5e3bf88&gt; (a org.apache.log4j.helpers.BoundedFIFO)</pre>
	
	
	More details about this bug are at <a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=38137">LOG4J-38137</a>
		JIRA page.
	</p>
	




	</p>
	<h2><b>Interleaving Description:</b></h2>
	<pre>
<b>org.apache.log4j.AsyncAppender:</b>

  public void append(LoggingEvent event) {
    ...
    synchronized(bf) {
        while(bf.isFull()) {
	       try {
	       //LogLog.debug("Waiting for free space in buffer, "+bf.length());
	       bf.wait();
	       } catch(InterruptedException e) {
	           if(!interruptedWarningMessage) {
	           interruptedWarningMessage = true;
	           LogLog.warn("AsyncAppender interrupted.", e);
	           } else {
	               LogLog.warn("AsyncAppender interrupted again.");
	           }
	       }
      }

      ...
  }
	</pre>
<p>
Precondition: bf = new BoundedFIFO(DEFAULT_BUFFER_SIZE), which is almost full.
</p>
<p>
    a) 
</p>







	<h2>
		<b>How To Reproduce: </b>
	</h2>
<p>
		This bug is reproduced under log4j 1.2.13 and JDK 1.6.0_33.
        <br>Execute
the following scripts to run the test to reproduce the bug (assume the
location of the log4j test project is log4j_test_home).</p>
<p>
		<b>Linux:</b><br> <i>${log4j_test_home}/scripts/38137.sh
			[--monitoroff]</i><br> <b>Windows:</b><br> <i>%log4j_test_home%\scripts\38137.bat
			[--monitoroff]</i>
	</p>
	<p><b>Example:</b>
		Use monitor to report and terminate the program when forever waiting
		happens:<i><br>${log4j_test_home}/scripts/38137.sh</i>
		<br><br>
		Turn off monitor:<br> <i> ${log4j_test_home}/scripts/38137.sh
			--monitoroff</i>
	</p>
	<table border="1">
		<tbody>
			<tr>
				<td>Option</td>
				<td>Function</td>


			</tr>


			<tr>
				<td>--monitoroff, -mo</td>
				<td>Turn off to stop reporting bug messages and ending program
					when test <br>runs into the expected concurrency bug which is
					a forever waiting.<br> User has to terminate the program
					manually when this option is set.
				</td>


			</tr>
		</tbody>
	</table>
</body></html>
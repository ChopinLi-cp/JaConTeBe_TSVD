<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>jdk7 bug 7132378</title>
</head>
<body>


	<h1>
		<b>Bug 7132378</b>
	</h1>
	<h2>
		<b>Bug Description:</b>
	</h2>
    <p>
	This is a race bug.
	<br>The buggy binary code has been instrumented in this test to increase the chance to trigger the bug.
	<br>The expected exception is a <b>NullpointerException</b>.
    <br>More details about this bug are at
	<a href="https://bugs.openjdk.java.net/browse/JDK-7132378">JDK-7132378</a> JIRA page.
    </p>
    <h2>
		<b>Interleaving Description:</b>
	</h2>
	<pre><b>java.util.concurrent.FutureTask$Sync</b>

t1  t2  V innerGet() throws InterruptedException, ExecutionException {
    2       acquireSharedInterruptibly(0);
            if (getState() == CANCELLED)
                throw new CancellationException();
            if (exception != null)
                throw new ExecutionException(exception);
    3       return result;
        }
        
        void innerSet(V v) {
            for (;;) {
                int s = getState();
                if (s == RAN)
                    return;
                if (s == CANCELLED) {
                    // aggressively release to set runner to null,
                    // in case we are racing with a cancel request
                    // that will try to interrupt runner
                    releaseShared(0);
                    return;
                }
1               if (compareAndSetState(s, RAN)) {
4                   result = v;
                    releaseShared(0);
                    done();
                    return;
                }
            }
        }

</pre>
	<p>
		Preconditions: <br>FutureTask is not run, <i>result</i> is null.
	</p>
	<p>
		a) thread 1 sets a value. It updates the task state to RAN at 1.
        <br>b) context switched, thread 2 acquires a continue signal at 2. The task's
		state has been set to RAN at step a). So here thread 2 does not need to
		wait at 2.
        <br>c) thread 2 returns <i>result</i> that is null at 3.
        <br>d) context switched, thread 1 assigns a value to result. But unexpected
		null value has been returned at step c).
	</p>


	<h2>
		<b>How To Reproduce:</b>
	</h2>

	<p>
		This bug is reproduced under JDK 1.7.0.
        <br>It started at JDK 1.7.0, and has been fixed since JDK 1.7.0_40.
        <br>Execute the following scripts to run the test to reproduce the bug (assume the location of the jdk7 test project is jdk7_test_home).
	</p>
	<p>
		<b>Linux:</b><br> <i>${jdk7_test_home}/scripts/7132378.sh [--javaloc path]</i>
		<br> <b>Windows:</b><br><i>%jdk7_test_home%\scripts\7132378.bat [--javaloc path]</i>
	</p>
	<table border="1">
		<tbody>
			<tr>
				<td>Option</td>
				<td>Function</td>
				<td>Default Value</td>
                <td>Valid Values</td>

			</tr>


			<tr>
				<td>--javaloc</td>
				<td>The location of JDK that is eligible to reproduce the bug,
					if your java environment is not eligible. <br>In this case,
					it's JDK 1.7.0. It should be the absolute path to the JDK's java starter
					and ended with "/".<br> For example: ~/jdk/home/jdk1.7.0/bin/
				</td>
				<td>N/A</td>
                <td>string</td>

			</tr>
		</tbody>
	</table>
</body>
</html>
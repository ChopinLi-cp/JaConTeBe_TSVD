<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>jdk7 bug 7045594</title>
</head>
<body>
	

		<h1><b>Bug 7045594</b></h1>
		<h2><b>Bug Description:</b></h2>
        <p>
This is a race bug.
<br>The expected exception is a <b>RuntimeException</b>.
<br>More details about this bug are at
<a href="https://bugs.openjdk.java.net/browse/JDK-7045594">JDK-7045594</a> JIRA page.
</p>
        <h2><b>Interleaving Description:</b></h2>
<pre><b>java.util.logging.Logger</b>

t1  t2  public static Logger getLogger(String name, String resourceBundleName) {
            LogManager manager = LogManager.getLogManager();
1   3       Logger result = manager.demandLogger(name);
2   4       if (result.resourceBundleName == null) {
                // Note: we may get a MissingResourceException here.
5   6            result.setupResourceInfo(resourceBundleName);
            } else if (!result.resourceBundleName.equals(resourceBundleName)) {
                throw new IllegalArgumentException(result.resourceBundleName +
                                    " != " + resourceBundleName);
            }
            return result;
        }
</pre>
<p>	
Preconditions:
<br>Two threads call getLogger with the same name and different resourceBundleName.
<br>t1:Logger logger1=Logger.getLogger("test", "bar");
<br>t2:Logger logger2=Logger.getLogger("test","foo");
</p>
<p>
    a) thread 1 gets a new instance of result at 1.
<br>b) result.resourceBundleName in thread 1 is null at 2.
<br>c) before thread 1 continues, context switched, at 3 thread 2 gets the same result as thread 1 got in step a).
<br>d) result.resourceBundleName in thread 2 is null at 4.
<br>e) context switched, thread 1 sets "bar" at 5.
<br>f) context switched, thread 2 sets "foo" at 6.
<br>g) now, thread 1's resourceInfo has been over written by thread 2.
</p>
	
	<h2>
		<b>How To Reproduce:</b>
	</h2>

	<p>
		This bug is reproduced under JDK 1.7.0.
        <br>It started at JDK 1.7.0, and has been fixed since JDK 1.8.0.
        <br>Execute the following scripts to run the test to reproduce the bug (assume the location of the jdk7 test project is jdk7_test_home).
	</p>
	<p>
		<b>Linux:</b>
        <br> <i>${jdk7_test_home}/scripts/7045594.sh [--javaloc path]</i>
        <br>
        <b>Windows:</b>
        <br> <i>%jdk7_test_home%\scripts\7045594.bat [--javaloc path]</i>
	</p>
	<table border="1">
		<tbody>
			<tr>
				<td>Option</td>
				<td>Function</td>
				<td>Default Value</td>
                <td>Valid Values</td>

			</tr>


			<tr>
				<td>--javaloc</td>
				<td>The location of JDK that is eligible to reproduce the bug, if your java environment is not eligible.
<br>In this case, it's JDK 1.7.0.
It should be the absolute path to the JDK's java starter and ended with "/".<br>
For example: ~/jdk/home/jdk1.7.0/bin/
				</td>
				<td>N/A</td>
                <td>string</td>

			</tr>
		</tbody>
	</table>
	</body>
</html>
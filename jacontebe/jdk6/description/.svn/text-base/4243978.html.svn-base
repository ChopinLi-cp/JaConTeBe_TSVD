<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>jdk bug 4243978</title>
</head>
<body>
	

		<h1><b>Bug 4243978</b></h1>
		<h2><b>Bug Description:</b></h2>
<p>
    This is a race bug.
    <br>The problem is that the (private) next field is used for two different linked lists. The first list is the "Pending" list of reference objects, which the garbage collector prepares for the referenceHandler thread. The second linked list is the list that implements the queue of the reference objects. The user program may invoke the enqueue method on an object in the Pending list. If that happens, the Pending list and/or the queue may be destroyed.
    <br> More details about this bug are at <a href="https://bugs.openjdk.java.net/browse/JDK-4243978">JDK-4243978</a> JIRA page.
</p>

<h2>
    <b>Interleaving Description:
    </b>
</h2>
<pre><b>java.lang.ref.Reference<T>$ReferenceHandler</b>
t1  t2  public void run() {
            ...
*           synchronized (lock) {
                if (pending != null) {
                    r = pending;
                    Reference rn = r.next;
                    pending = (rn == r) ? null : rn;
    2               r.next = r;
                    ...
                }
                ...
            }
            ...
        }
            
<b>java.lang.ref.ReferenceQueue<T></b>
        boolean enqueue(Reference&lt;? extends T&gt; r) {
            ...
*           synchronized (lock) {
                r.queue = ENQUEUED;
1               r.next = (head == null) ? r : head;
                head = r;
                ...
            }
            ...
        }
</pre>
<p>	
Precondition:<br> 
Althogh both methods have synchronized on lock at *, those locks are different instances in two classes. 
head at 1 is the head element of a link list queue. 
</p>
<p>
    a) thread 1 put r in front of the queue at 1.
<br>b) context switched, thread 2 set r.next to itself at 2. When the r at 2 is exactly the same instance as
   the r at 1, r.next was the head of queue, but now it's r itself, and the whole queue is lost. 
</p>
	
	<h2>
		<b>How To Reproduce:</b>
	</h2>

	<p>
		This bug is reproduced under JDK 1.6.0_33 and JDK 1.7.0.
        <br>It started at JDK 1.6.0, and has been fixed since JDK 1.8.0.
        <br>Execute the following scripts to run the test to reproduce the bug (assume the location of the jdk6 test project is jdk_test_home).
	</p>
	<p>
		<b>Linux:</b><br> <i>${jdk_test_home}/scripts/4243978.sh [--javaloc path]</i><br> <b>Windows:</b><br> <i>%jdk_test_home%\scripts\4243978.bat [--javaloc path]</i>
	</p>
	<table border="1">
		<tbody>
			<tr>
				<td>Option</td>
				<td>Function</td>
                <td>Default Value</td>
                <td>Valid Values</td>

			</tr>


			<tr>
				<td>--javaloc</td>
				<td>The location of JDK that is eligible to reproduce the bug, if your java environment is not eligible.
<br>In this case, it's JDK 1.6.0 or JDK1.7.0.
It should be the absolute path to the JDK's java starter and ended with "/".<br>
For example: ~/jdk/home/jdk1.6.0/bin/
				</td>
                <td>N/A</td>
                <td>string</td>

			</tr>
		</tbody>
	</table>
	</body>
</html>
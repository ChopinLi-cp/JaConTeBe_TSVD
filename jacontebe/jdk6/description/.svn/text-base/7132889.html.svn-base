<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>jdk bug 7132889</title>
</head>
<body>
	

		<h1><b>Bug 7132889</b></h1>
		
	<h2><b>Bug Description:</b></h2>
    <p>
	This is a race bug.
<br>Expected exception is: <br><b>java.lang.RuntimeException</b>: Key is valid
    <br> More details about this bug are at
	<a href="https://bugs.openjdk.java.net/browse/JDK-7132889">JDK-7132889</a> JIRA page.
	</p>
    <h2>
		<b>Interleaving Description:</b>
	</h2>
	<pre><b>java.nio.channels.spi.AbstractInterruptibleChannel:</b>
t1  public final void close() throws IOException {
        synchronized (closeLock) {
1           if (!open)
                return;
3           open = false;
4           implCloseChannel();
        }
    }
    
<b>java.nio.channels.spi.AbstractSelectableChannel:</b>
t2  public final SelectionKey register(Selector sel, int ops,
                       Object att)
    throws ClosedChannelException
    {
2       if (!isOpen())
            throw new ClosedChannelException();
        if ((ops & ~validOps()) != 0)
            throw new IllegalArgumentException();
        synchronized (regLock) {
            if (blocking)
                throw new IllegalBlockingModeException();
            SelectionKey k = findKey(sel);
            if (k != null) {
                k.interestOps(ops);
                k.attach(att);
            }
            if (k == null) {
                // New registration
                k = ((AbstractSelector)sel).register(this, ops, att);
5               addKey(k);
            }
6           return k;
        }
    }</pre>
	<p>
	a) thread 1 checks channel is open at 1.
<br>b) Before thread 1 set open to false at 3, context switched, thread 2 passes the check of open at 2.
<br>c) context switched, thread 1 set open to false at 3 and close the channel at 4.<br>
    d) context switched, thread 2 successfully registered the key through 5 and 6.
<br>Although channel has been closed, key is still registered successfully. 
</p>
	<h2>
		<b>How To Reproduce:</b>
	</h2>

	<p>
		This bug is reproduced under JDK 1.6.0.
        <br>It started at JDK 1.6.0, and has been fixed since JDK 1.7.0_41.
        <br>Execute the following scripts to run the test to reproduce the bug (assume the location of the jdk6 test project is jdk_test_home).
	</p>
	<p>
		<b>Linux:</b><br>
		<i>${jdk_test_home}/scripts/7132889.sh [--javaloc path]</i><br>
		<b>Windows:</b><br>
		<i>%jdk_test_home%\scripts\7132889.bat [--javaloc path]</i><br>
    </p>
	<table border="1">
		<tbody>
			<tr>
				<td>Option</td>
				<td>Function</td>
				<td>Default Value</td>
                <td>Valid Values</td>

			</tr>



			<tr>
				<td>--javaloc</td>
				<td>The location of JDK that is eligible to reproduce the bug,
					if your java environment is not eligible. <br>In this case,
					it's JDK 1.6.0. It should be the absolute path to the JDK's java
					starter and ended with "/".<br> For example:
					~/jdk/home/jdk1.6.0/bin/
				</td>
				<td>N/A</td>
                <td>string</td>
			</tr>
		</tbody>
	</table>
</body>
</html>